<launch>
  <arg name="ns" default="moveit_grasps_test" />
    <!-- Debug -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <!-- Verbose mode -->
  <arg name="verbose" default="false" />
  <arg unless="$(arg verbose)" name="command_args" value="" />
  <arg     if="$(arg verbose)" name="command_args" value="--verbose" />

  <include file="$(find panda_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find panda_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <group ns="$(arg ns)">
    <!-- Which arm to use -->
    <param name="ee_group_name" value="hand"/>      
    <rosparam command="load" file="$(find moveit_grasps)/robot_config/panda.yaml"/>
  </group>

  <!-- Start the test -->
  <node name="moveit_grasps_test" launch-prefix="$(arg launch_prefix)" pkg="moveit_grasps"
  type="moveit_grasps_test" output="screen" args="$(arg command_args)">
    <rosparam command="load" file="$(find moveit_grasps)/visualization_config/grasp_debug_level.yaml"/>
  </node>

  <include file="$(find moveit_grasps)launch/rviz.launch" />

</launch>
